/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carrentalsystem;

import static carrentalsystem.Functions.*;
import static carrentalsystem.LoginDialog.uid;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class CustomerAddBookings extends javax.swing.JFrame {

    /**
     * Creates new form CustomerAddBookings
     */
    public CustomerAddBookings() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayCarInfoTable = new javax.swing.JTable();
        searchCarLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        searchFilter = new javax.swing.JComboBox<>();
        searchInput = new javax.swing.JTextField();
        startRentLabel = new javax.swing.JLabel();
        endRentLabel = new javax.swing.JLabel();
        startRentSearchInput = new javax.swing.JTextField();
        endRentSearchInput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        addBookingsPanel = new javax.swing.JPanel();
        addBookingLabel = new javax.swing.JLabel();
        carIDLabel = new javax.swing.JLabel();
        carIDDisplay = new javax.swing.JTextField();
        carTypeLabel = new javax.swing.JLabel();
        carTypeInput = new javax.swing.JTextField();
        carBrandLabel = new javax.swing.JLabel();
        carBrandDisplay = new javax.swing.JTextField();
        seatNumLabel = new javax.swing.JLabel();
        seatNumDisplay = new javax.swing.JTextField();
        pricePerHourLabel = new javax.swing.JLabel();
        pricePerHourDisplay = new javax.swing.JTextField();
        carPlateLabel = new javax.swing.JLabel();
        carPlateDisplay = new javax.swing.JTextField();
        startRentDateLabel = new javax.swing.JLabel();
        startRentDateDisplay = new javax.swing.JTextField();
        endRentDateLabel = new javax.swing.JLabel();
        endRentDateDisplay = new javax.swing.JTextField();
        totalPriceLabel = new javax.swing.JLabel();
        totalPriceDisplay = new javax.swing.JTextField();
        addBookingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        displayCarInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Car Brand", "Car Type", "Seat Num", "Car Plate", "Price Per Hour", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayCarInfoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayCarInfoTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(displayCarInfoTable);

        searchCarLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchCarLabel.setText("Search Car");

        searchFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Cars Available", "Car Brand", "Car Type", "Seat Number" }));

        startRentLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        startRentLabel.setText("Start Rent Date");

        endRentLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        endRentLabel.setText("End Rent Date");

        startRentSearchInput.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        startRentSearchInput.setForeground(new java.awt.Color(153, 153, 153));
        startRentSearchInput.setText("yyyy/mm/dd HH:mm");
        startRentSearchInput.setToolTipText("");
        startRentSearchInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startRentSearchInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                startRentSearchInputFocusLost(evt);
            }
        });

        endRentSearchInput.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        endRentSearchInput.setForeground(new java.awt.Color(153, 153, 153));
        endRentSearchInput.setText("yyyy/mm/dd HH:mm");
        endRentSearchInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endRentSearchInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                endRentSearchInputFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchInput))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startRentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startRentSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(endRentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(endRentSearchInput, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startRentLabel)
                    .addComponent(endRentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startRentSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endRentSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        addBookingLabel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        addBookingLabel.setText("Add Booking");

        carIDLabel.setText("Car ID:");

        carIDDisplay.setEditable(false);

        carTypeLabel.setText("Car Type:");

        carTypeInput.setEditable(false);

        carBrandLabel.setText("Car Brand:");

        carBrandDisplay.setEditable(false);

        seatNumLabel.setText("Seat Num:");

        seatNumDisplay.setEditable(false);

        pricePerHourLabel.setText("Price Per Hour:");

        pricePerHourDisplay.setEditable(false);

        carPlateLabel.setText("Car Plate:");

        carPlateDisplay.setEditable(false);

        startRentDateLabel.setText("Start Rent Date:");

        startRentDateDisplay.setEditable(false);

        endRentDateLabel.setText("End Rent Date:");

        endRentDateDisplay.setEditable(false);

        totalPriceLabel.setText("Total Price (RM):");

        totalPriceDisplay.setEditable(false);

        addBookingButton.setText("Add Booking");
        addBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addBookingsPanelLayout = new javax.swing.GroupLayout(addBookingsPanel);
        addBookingsPanel.setLayout(addBookingsPanelLayout);
        addBookingsPanelLayout.setHorizontalGroup(
            addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                .addComponent(addBookingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 857, Short.MAX_VALUE))
            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addBookingButton)
                    .addGroup(addBookingsPanelLayout.createSequentialGroup()
                        .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(totalPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(totalPriceDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(startRentDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(startRentDateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(carPlateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(carPlateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(carTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(carTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(carIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(carIDDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(169, 169, 169)
                        .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(carBrandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(carBrandDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(seatNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(seatNumDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(pricePerHourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pricePerHourDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBookingsPanelLayout.createSequentialGroup()
                                .addComponent(endRentDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(endRentDateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addBookingsPanelLayout.setVerticalGroup(
            addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBookingsPanelLayout.createSequentialGroup()
                .addComponent(addBookingLabel)
                .addGap(18, 18, 18)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carIDLabel)
                    .addComponent(carIDDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carBrandLabel)
                    .addComponent(carBrandDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carTypeLabel)
                    .addComponent(carTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seatNumLabel)
                    .addComponent(seatNumDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pricePerHourLabel)
                    .addComponent(pricePerHourDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carPlateLabel)
                    .addComponent(carPlateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startRentDateLabel)
                    .addComponent(startRentDateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endRentDateLabel)
                    .addComponent(endRentDateDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalPriceLabel)
                    .addComponent(totalPriceDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addBookingButton)
                .addGap(0, 39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBookingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchCarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton)
                        .addGap(13, 13, 13))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE))
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(searchCarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(addBookingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
    
    private void startRentSearchInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startRentSearchInputFocusGained
        if(startRentSearchInput.getText().equals("yyyy/mm/dd HH:mm")){
            startRentSearchInput.setText("");
            startRentSearchInput.setForeground(new Color(0,0,0));
            startRentSearchInput.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        }
    }//GEN-LAST:event_startRentSearchInputFocusGained

    private void startRentSearchInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startRentSearchInputFocusLost
        if(startRentSearchInput.getText().equals("")){
            startRentSearchInput.setText("yyyy/mm/dd HH:mm");
            startRentSearchInput.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_startRentSearchInputFocusLost

    private void endRentSearchInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_endRentSearchInputFocusGained
        if(endRentSearchInput.getText().equals("yyyy/mm/dd HH:mm")){
            endRentSearchInput.setText("");
            endRentSearchInput.setForeground(new Color(0,0,0));
            endRentSearchInput.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        }
    }//GEN-LAST:event_endRentSearchInputFocusGained

    private void endRentSearchInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_endRentSearchInputFocusLost
        if(endRentSearchInput.getText().equals("")){
            endRentSearchInput.setText("yyyy/mm/dd HH:mm");
            endRentSearchInput.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_endRentSearchInputFocusLost

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String input = searchFilter.getSelectedItem().toString();
        String searchText = searchInput.getText();
        String startRent = startRentSearchInput.getText();
        String endRent = endRentSearchInput.getText();

        
        if((startRent.isBlank() || endRent.isBlank()) || (startRent.equals("yyyy/mm/dd HH:mm")) || endRent.equals("yyyy/mm/dd HH:mm")){
            messageBox("Please enter renting dates!");
        }else{
            try{  
                LocalDateTime startRentDate = LocalDateTime.parse(startRent, formatter);
                LocalDateTime endRentDate = LocalDateTime.parse(endRent, formatter);
                
                if(searchText.isBlank() && !input.equals("All Cars Available")){
                    messageBox("Please enter search range!");
                }else if(!searchText.isBlank() && input.equals("All Cars Available")){
                    messageBox("All car details are displayed.");
                }

                ArrayList<Car> carDetails = showCarInfo(input, searchText);
                ArrayList<Car> carAvailableList = carAvailable(carDetails, startRentDate, endRentDate);
                DisplayCarDetailsTable(carAvailableList); 
            }catch(DateTimeParseException e){
                messageBox("Please enter valid date format!");
            }  
        }
        
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void displayCarInfoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayCarInfoTableMouseClicked
        if(evt.getClickCount()>=2){
            int row = displayCarInfoTable.getSelectedRow();
            carIDDisplay.setText(displayCarInfoTable.getModel().getValueAt(row, 0).toString());
            carBrandDisplay.setText(displayCarInfoTable.getModel().getValueAt(row, 1).toString());
            carTypeInput.setText(displayCarInfoTable.getModel().getValueAt(row, 2).toString());
            seatNumDisplay.setText(displayCarInfoTable.getModel().getValueAt(row, 3).toString());
            carPlateDisplay.setText(displayCarInfoTable.getModel().getValueAt(row, 4).toString());
            String pricePerHour = displayCarInfoTable.getModel().getValueAt(row, 5).toString();
            pricePerHourDisplay.setText(pricePerHour);
            startRentDateDisplay.setText(startRentSearchInput.getText());
            endRentDateDisplay.setText(endRentSearchInput.getText());
            
            LocalDateTime startRentDate = LocalDateTime.parse(startRentSearchInput.getText(), formatter);
            LocalDateTime endRentDate = LocalDateTime.parse(endRentSearchInput.getText(), formatter);
            
            //calculate the total price for rent
            long hours = ChronoUnit.HOURS.between(startRentDate, endRentDate);
            double price = Double.parseDouble(pricePerHour) * hours;
            totalPriceDisplay.setText(String.valueOf(price));
        }
    }//GEN-LAST:event_displayCarInfoTableMouseClicked

    private void addBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookingButtonActionPerformed
        ArrayList<Booking> bookingList = readTextFile("booking");
        int lastIndex = 0;
        int newIDNumber = 0;
        String newID = null;

        Car carID = new Car(carIDDisplay.getText());
        double totalPrice = Double.parseDouble(totalPriceDisplay.getText());
        LocalDateTime startRent = LocalDateTime.parse(startRentDateDisplay.getText(), formatter);
        LocalDateTime endRent = LocalDateTime.parse(endRentDateDisplay.getText(), formatter);
        String bookingStatus = "Unconfirmed";
        String paymentStatus = "Unpaid";
        
        //get new booking id
        if(!bookingList.isEmpty()) {
                lastIndex = bookingList.size() - 1;
             }

             String bid = bookingList.get(lastIndex).getBookingID();

             String[] num = bid.split("BK");
             for(String i : num) {
                 if(!i.equals("")) {
                     newIDNumber = Integer.parseInt(i) + 1;
                 }

                 if(newIDNumber < 10) {
                     newID = "00"; 
                 }
                 else if(newIDNumber < 100) {
                     newID = "0";
                 }
                 else{
                     newID = "";
                 }
             }

             String newBookingID = "BK" + newID + String.valueOf(newIDNumber);
            
        try {
            addBookings(new Booking(newBookingID, uid ,carID, startRent, endRent, bookingStatus, totalPrice, paymentStatus));
        } catch (IOException ex) {
            Logger.getLogger(CustomerAddBookings.class.getName()).log(Level.SEVERE, null, ex);
            messageBox("Error occured! Please try again!");
        }
    }//GEN-LAST:event_addBookingButtonActionPerformed

    private ArrayList carAvailable(ArrayList<Car> carFilterList,LocalDateTime startRentDate, LocalDateTime endRentDate){
        ArrayList<Booking> bookingList = readTextFile("booking");
        ArrayList<Car> carAvailableList = new ArrayList<>();

        for(Booking b : bookingList){
            //check car unavailable for booking date
            if(!((startRentDate.isBefore(b.getStartDate()) && endRentDate.isBefore(b.getStartDate())) || (endRentDate.isAfter(b.getEndDate()) && startRentDate.isAfter(b.getEndDate())))){
                //add available car with filter search
                for(Car c : carFilterList){
                    if(!c.getCarID().equals(b.getCar().getCarID())){
                        if(!carAvailableList.contains(c)){
                            carAvailableList.add(c);
                        }
                    }
                }
            }
        }
        return carAvailableList;
    }
    
    private ArrayList showCarInfo(String input, String searchText) {
        ArrayList<Car> carList = readTextFile("car");
        ArrayList<Car> carDetails = new ArrayList<>();
        try {
            switch (input) {
                
                case "All Cars Available":
                    return carList;

                case "Car Brand":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getBrand())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Car Type":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getCarType())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Seat Number":
                    for (Car i : carList) {
                        if (Integer.parseInt(searchText)==i.getSeatNum()) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Car Plate":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getCarPlate())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;                    
            }

        } catch (IllegalArgumentException e) {
            messageBox("Details not found! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);      
        }
        return null;
    }
    
    private void DisplayCarDetailsTable(ArrayList<Car> carList) {      
        
        try {
            DefaultTableModel tableModel = (DefaultTableModel)displayCarInfoTable.getModel();
            tableModel.setRowCount(0);

            //get and set data to table
            if(!carList.isEmpty()){
                for(Car c : carList){
                    String carID = c.getCarID();
                    String brand = c.getBrand();
                    String carType = c.getCarType();
                    int seatNum = c.getSeatNum();
                    String carPlate = c.getCarPlate();
                    Double price = c.getPricePerHour();
                    String availability = c.getStatus();
                    
                    Object[] data = {carID, brand, carType, seatNum, carPlate, price, availability};
                    tableModel.addRow(data);
                }
            }
            else{
                String[] noRecord = {"No records."};
                tableModel.addRow(noRecord);
            }
            
        } catch (Exception e) {
            messageBox("Details not found! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void customerAddBooking() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerAddBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerAddBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerAddBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerAddBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerAddBookings().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBookingButton;
    private javax.swing.JLabel addBookingLabel;
    private javax.swing.JPanel addBookingsPanel;
    private javax.swing.JTextField carBrandDisplay;
    private javax.swing.JLabel carBrandLabel;
    private javax.swing.JTextField carIDDisplay;
    private javax.swing.JLabel carIDLabel;
    private javax.swing.JTextField carPlateDisplay;
    private javax.swing.JLabel carPlateLabel;
    private javax.swing.JTextField carTypeInput;
    private javax.swing.JLabel carTypeLabel;
    private javax.swing.JTable displayCarInfoTable;
    private javax.swing.JTextField endRentDateDisplay;
    private javax.swing.JLabel endRentDateLabel;
    private javax.swing.JLabel endRentLabel;
    private javax.swing.JTextField endRentSearchInput;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pricePerHourDisplay;
    private javax.swing.JLabel pricePerHourLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchCarLabel;
    private javax.swing.JComboBox<String> searchFilter;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTextField seatNumDisplay;
    private javax.swing.JLabel seatNumLabel;
    private javax.swing.JTextField startRentDateDisplay;
    private javax.swing.JLabel startRentDateLabel;
    private javax.swing.JLabel startRentLabel;
    private javax.swing.JTextField startRentSearchInput;
    private javax.swing.JTextField totalPriceDisplay;
    private javax.swing.JLabel totalPriceLabel;
    // End of variables declaration//GEN-END:variables
}
