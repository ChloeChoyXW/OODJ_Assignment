/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carrentalsystem;

import static carrentalsystem.Functions.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class AdminViewCarDetails extends javax.swing.JFrame {
    private String aid;
    private String userType;
    /**
     * Creates new form NewJFrame
     */
    public AdminViewCarDetails(String aid, String userType) {
        initComponents();
        this.aid = aid;
        this.userType = userType;
        JMenu logout = new JMenu("Logout");
        if(!this.userType.equalsIgnoreCase("manager")){
            MenuBar.add(logout);
            logout.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        logout();
                    }
                });
            
        }else{
            JMenu viewStaff = new JMenu("View Staffs");
            JMenu report = new JMenu("Reports");
            MenuBar.add(viewStaff);
            MenuBar.add(report);
            MenuBar.add(logout);
            
            viewStaff.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        viewStaff();     
                    }
                });
            
            report.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        viewReport();      
                    }
                });
            
            logout.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        logout();
                    }
                });
        }
    }
    
    private void viewStaff(){
        AdminViewStaff.adminViewStaffs(this.aid, this.userType);
        this.dispose();
    }
    
    private void viewReport(){
        BusinessReport.businessReport(this.aid, this.userType);
        this.dispose();
    }
    
    private void logout(){
        CustomerAddBooking.main(null);
        this.dispose();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        searchInput = new javax.swing.JTextField();
        selectedSearch = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayCarInfo = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        carInfoLabel = new javax.swing.JLabel();
        editAddCarLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pricePerHourLabel = new javax.swing.JLabel();
        carPlateInput = new javax.swing.JTextField();
        availabilityLabel = new javax.swing.JLabel();
        carIDDisplay = new javax.swing.JTextField();
        availableButton = new javax.swing.JRadioButton();
        carIDLabel = new javax.swing.JLabel();
        unavailableButton = new javax.swing.JRadioButton();
        carBrandLabel = new javax.swing.JLabel();
        carBrandInput = new javax.swing.JTextField();
        carTypeInput = new javax.swing.JTextField();
        seatNumberLabel = new javax.swing.JLabel();
        carTypeLabel = new javax.swing.JLabel();
        pricePerHourInput = new javax.swing.JTextField();
        seatNumberInput = new javax.swing.JTextField();
        carPlateLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        viewBookingMenu = new javax.swing.JMenu();
        viewCarMenu = new javax.swing.JMenu();
        viewCustomerMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(811, 629));
        setSize(new java.awt.Dimension(1112, 670));

        selectedSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Car ID", "Brand", "Car Type", "Number of Seat", "Car Plate", "Car Available", "Car Unavailable" }));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        displayCarInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Brand", "Car Type", "Seat Number", "Car Plate", "Price", "Availlability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayCarInfo.setToolTipText("");
        displayCarInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayCarInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(displayCarInfo);

        carInfoLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        carInfoLabel.setText("Car Info");

        editAddCarLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        editAddCarLabel.setText("Edit/Add Car Info");

        updateButton.setText("Update");
        updateButton.setActionCommand("");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        pricePerHourLabel.setText("Price Per Hour:");

        availabilityLabel.setText("Availability:");

        carIDDisplay.setEditable(false);

        buttonGroup1.add(availableButton);
        availableButton.setText("Available");

        carIDLabel.setText("Car ID:");

        buttonGroup1.add(unavailableButton);
        unavailableButton.setText("Unavailable");

        carBrandLabel.setText("Brand:");

        seatNumberLabel.setText("Seat Number:");

        carTypeLabel.setText("Car Type:");

        carPlateLabel.setText("Car Plate:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(carIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(carBrandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(seatNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pricePerHourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(carIDDisplay)
                        .addComponent(carBrandInput)
                        .addComponent(seatNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pricePerHourInput, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(carPlateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carPlateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(carTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(availabilityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unavailableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carIDDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carIDLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carBrandLabel)
                    .addComponent(carBrandInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carPlateLabel)
                    .addComponent(carPlateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatNumberLabel)
                    .addComponent(seatNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availabilityLabel)
                    .addComponent(availableButton)
                    .addComponent(unavailableButton)
                    .addComponent(pricePerHourLabel)
                    .addComponent(pricePerHourInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        viewBookingMenu.setText("View Bookings");
        viewBookingMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewBookingMenuMouseClicked(evt);
            }
        });
        MenuBar.add(viewBookingMenu);

        viewCarMenu.setText("View Cars");
        viewCarMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewCarMenuMouseClicked(evt);
            }
        });
        MenuBar.add(viewCarMenu);

        viewCustomerMenu.setText("View Customers");
        viewCustomerMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewCustomerMenuMouseClicked(evt);
            }
        });
        MenuBar.add(viewCustomerMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addGap(389, 389, 389))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectedSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton))
                            .addComponent(carInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editAddCarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1036, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 995, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(carInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(editAddCarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String input = selectedSearch.getSelectedItem().toString();
        String searchText = searchInput.getText();
        ArrayList<Car> carDetails = showCarInfo(input, searchText);
        DisplayCarDetailsTable(carDetails);    
    }//GEN-LAST:event_searchButtonActionPerformed

    private void displayCarInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayCarInfoMouseClicked
        if(evt.getClickCount()>=2){
            int row = displayCarInfo.getSelectedRow();
            setCarDetails(row);
        }
    }//GEN-LAST:event_displayCarInfoMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            if(carIDDisplay.getText().isBlank()){            
                addCar();
            } 
            else{
                editCarInfo();
            }
        }catch (IOException ex) {
                Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        carIDDisplay.setText("");
        carBrandInput.setText("");
        carTypeInput.setText("");
        seatNumberInput.setText("");
        carPlateInput.setText("");
        pricePerHourInput.setText("");
        availableButton.setSelected(false);
        unavailableButton.setSelected(false);
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void viewBookingMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewBookingMenuMouseClicked
        AdminViewBookingDetails.adminViewBooking(this.aid, this.userType);
        this.dispose();
    }//GEN-LAST:event_viewBookingMenuMouseClicked

    private void viewCarMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewCarMenuMouseClicked
        AdminViewCarDetails.adminViewCarDetails(this.aid, this.userType);
        this.dispose();
    }//GEN-LAST:event_viewCarMenuMouseClicked

    private void viewCustomerMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewCustomerMenuMouseClicked
        AdminViewUser.adminViewUser(this.aid, this.userType);
        this.dispose();
    }//GEN-LAST:event_viewCustomerMenuMouseClicked
    
    //show car details after clicked from table
    private void setCarDetails(int row){
        String carID = displayCarInfo.getModel().getValueAt(row, 0).toString();
            String carBrand = displayCarInfo.getModel().getValueAt(row, 1).toString();
            String carType = displayCarInfo.getModel().getValueAt(row, 2).toString();
            String seatNum = displayCarInfo.getModel().getValueAt(row, 3).toString();
            String carPlate = displayCarInfo.getModel().getValueAt(row, 4).toString();
            String price = displayCarInfo.getModel().getValueAt(row, 5).toString();
            String availability = displayCarInfo.getModel().getValueAt(row, 6).toString();
            
            carIDDisplay.setText(carID);
            carBrandInput.setText(carBrand);
            carTypeInput.setText(carType);
            seatNumberInput.setText(seatNum);
            carPlateInput.setText(carPlate);
            pricePerHourInput.setText(price);
            if(availability.equalsIgnoreCase("Available")){
                availableButton.setSelected(true);
            }else{
                unavailableButton.setSelected(true);
            }
    }
    
    //search filter
    private ArrayList showCarInfo(String input, String searchText) {
        ArrayList<Car> carList = readTextFile("car");
        ArrayList<Car> carDetails = new ArrayList<>();
        try {
            switch (input) {
                case "Car ID":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getCarID())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Brand":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getBrand())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Car Type":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getCarType())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Number of Seat":
                    for (Car i : carList) {
                        if (Integer.parseInt(searchText)==i.getSeatNum()) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;

                case "Car Plate":
                    for (Car i : carList) {
                        if (searchText.equalsIgnoreCase(i.getCarPlate())) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;
                    
                case "Car Available":
                    for (Car i : carList) {
                        if (i.getStatus().equalsIgnoreCase("Available")) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;
                    
                case "Car Unavailable":
                    for (Car i : carList) {
                        if (i.getStatus().equalsIgnoreCase("Unavailable")) {
                            carDetails.add(i);                            
                        }
                    }
                    return carDetails;
            }

        } catch (IllegalArgumentException e) {
            messageBox("Details not found! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);
            
        }
        return null;
        
        
    }
    
    //add new car info
    private void addCar() throws IOException{
        ArrayList<Car> carList = readTextFile("car");
        int lastIndex = 0;
        int newIDNumber = 0;
        String number = null;
        String availability=null;

        try{
            // get booking ID of last index
            if(!carList.isEmpty()) {
               lastIndex = carList.size() - 1;
            }

            String carID = carList.get(lastIndex).getCarID();

            String[] num = carID.split("C");
            for(String i : num) {
                if(!i.equals("")) {
                    newIDNumber = Integer.parseInt(i) + 1;
                }

                if(newIDNumber < 10) {
                    number = "00"; 
                }
                else if(newIDNumber < 100) {
                    number = "0";
                }
                else{
                    number = "";
                }
            }
            String id = "C" + number + String.valueOf(newIDNumber);
            
            String carBrand = carBrandInput.getText();
            String carType = carTypeInput.getText().toUpperCase();
            int seatNum = Integer.parseInt(seatNumberInput.getText());
            String carPlate = carPlateInput.getText().toUpperCase().replaceAll("\\s", "");
            Double price = Double.parseDouble(pricePerHourInput.getText());
            if(availableButton.isSelected()){
                availability = "Available";
            }
            if(unavailableButton.isSelected()){
                availability = "Unavailable";
        }

            Car details = new Car(id, carBrand, carType, seatNum, carPlate, price, availability);
            System.out.println(details.toString());
//            addCars(details);
            
        }catch (Exception e) {
            messageBox("Error occured! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);
        }

        
    }
    
    //edit existing car info
    private void editCarInfo() throws IOException{
        ArrayList<Car> carList = readTextFile("car");
        ArrayList<Car> updatedList = new ArrayList<>();
        String availability=null;
        
        try{
            String carID = carIDDisplay.getText();
            String carBrand = carBrandInput.getText().toUpperCase();
            String carType = carTypeInput.getText().toUpperCase();
            int seatNum = Integer.parseInt(seatNumberInput.getText());
            String carPlate = carPlateInput.getText().toUpperCase().replaceAll("\\s", "");
            Double price = Double.parseDouble(pricePerHourInput.getText());
            if(availableButton.isSelected()){
                availability = "Available";
            }
            if(unavailableButton.isSelected()){
                availability = "Unavailable";
            }

            for(Car c : carList){
                if(carIDDisplay.getText().equals(c.getCarID())){
                    updatedList.add(new Car(carID, carBrand, carType, seatNum, carPlate, price, availability));
                }
                else{
                    updatedList.add(c);
                }
            }

            updateCarDetails(updatedList); 
        }catch (Exception e) {
            messageBox("Error occured! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);
        }
    } 
    
    //display data in table
    private void DisplayCarDetailsTable(ArrayList<Car> carList) {      
        
        try {
            DefaultTableModel tableModel = (DefaultTableModel)displayCarInfo.getModel();
            tableModel.setRowCount(0);

            //get and set data to table
            if(!carList.isEmpty()){
                for(Car c : carList){
                    String carID = c.getCarID();
                    String brand = c.getBrand();
                    String carType = c.getCarType();
                    int seatNum = c.getSeatNum();
                    String carPlate = c.getCarPlate();
                    Double price = c.getPricePerHour();
                    String availability = c.getStatus();
                    
                    Object[] data = {carID, brand, carType, seatNum, carPlate, price, availability};
                    tableModel.addRow(data);
                }
            }
            else{
                String[] noRecord = {"No records."};
                tableModel.addRow(noRecord);
            }
            
        } catch (Exception e) {
            messageBox("Details not found! Please try again!");
            Logger.getLogger(AdminViewCarDetails.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void adminViewCarDetails(String aid, String userType) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminViewCarDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminViewCarDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminViewCarDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminViewCarDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminViewCarDetails(aid, userType).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel availabilityLabel;
    private javax.swing.JRadioButton availableButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField carBrandInput;
    private javax.swing.JLabel carBrandLabel;
    private javax.swing.JTextField carIDDisplay;
    private javax.swing.JLabel carIDLabel;
    private javax.swing.JLabel carInfoLabel;
    private javax.swing.JTextField carPlateInput;
    private javax.swing.JLabel carPlateLabel;
    private javax.swing.JTextField carTypeInput;
    private javax.swing.JLabel carTypeLabel;
    private javax.swing.JTable displayCarInfo;
    private javax.swing.JLabel editAddCarLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField pricePerHourInput;
    private javax.swing.JLabel pricePerHourLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTextField seatNumberInput;
    private javax.swing.JLabel seatNumberLabel;
    private javax.swing.JComboBox<String> selectedSearch;
    private javax.swing.JRadioButton unavailableButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JMenu viewBookingMenu;
    private javax.swing.JMenu viewCarMenu;
    private javax.swing.JMenu viewCustomerMenu;
    // End of variables declaration//GEN-END:variables
}
